{"ast":null,"code":"var _jsxFileName = \"D:\\\\All_tutorials\\\\REACT_COLT\\\\10.Hangman\\\\src\\\\Hangman.js\";\nimport React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { randomWord } from \"./words\";\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  constructor(props) {\n    super(props);\n    this.state = {\n      nWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    };\n    this.handleGuess = this.handleGuess.bind(this);\n  }\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(ltr => this.state.guessed.has(ltr) ? ltr : \"_\");\n  }\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n\n\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n\n    if (this.state.nWrong === 6) {\n      return;\n    }\n\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n  /** generateButtons: return array of letter buttons to render */\n\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((ltr, idx) => React.createElement(\"button\", {\n      value: ltr,\n      key: idx,\n      onClick: this.handleGuess,\n      disabled: this.state.guessed.has(ltr),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, ltr));\n  }\n  /** render: render game */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Hangman\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Hangman\"), React.createElement(\"img\", {\n      src: this.props.images[this.state.nWrong],\n      alt: `${this.state.nWrong} wrong guesses`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Number wrong: \", this.state.nWrong), React.createElement(\"p\", {\n      className: \"Hangman-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.nWrong === 6 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" Apple \") : this.guessedWord()), React.createElement(\"p\", {\n      className: \"Hangman-btns\",\n      style: this.state.nWrong === 6 ? this.props.styles : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.generateButtons()), this.state.nWrong === 6 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"\\\"You Loose\\\" \") : \"\");\n  }\n\n}\n\nHangman.defaultProps = {\n  maxWrong: 6,\n  images: [img0, img1, img2, img3, img4, img5, img6],\n  styles: {\n    display: \"none\"\n  }\n};\nexport default Hangman;","map":{"version":3,"sources":["D:/All_tutorials/REACT_COLT/10.Hangman/src/Hangman.js"],"names":["React","Component","img0","img1","img2","img3","img4","img5","img6","randomWord","Hangman","constructor","props","state","nWrong","guessed","Set","answer","handleGuess","bind","guessedWord","split","map","ltr","has","evt","target","value","setState","st","add","includes","generateButtons","idx","render","images","styles","defaultProps","maxWrong","display"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { randomWord } from \"./words\";\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  static defaultProps = {\n    maxWrong: 6,\n    images: [img0, img1, img2, img3, img4, img5, img6],\n    styles:{\n      display: \"none\"\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { nWrong: 0, guessed: new Set(), answer: randomWord() };\n    this.handleGuess = this.handleGuess.bind(this);\n   \n  }\n\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map(ltr => (this.state.guessed.has(ltr) ? ltr : \"_\"));\n  }\n\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    if (this.state.nWrong === 6){\n      return \n    }\n\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n\n  /** generateButtons: return array of letter buttons to render */\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((ltr, idx) => (\n      <button\n        value={ltr}\n        key={idx}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(ltr)}\n      >\n        {ltr}\n      </button>\n    ));\n  }\n\n  /** render: render game */\n  render() {\n    return (\n      <div className='Hangman'>\n        <h1>Hangman</h1>\n        <img src={this.props.images[this.state.nWrong]} alt={`${this.state.nWrong} wrong guesses`}/>\n        <p>Number wrong: {this.state.nWrong}</p>\n        <p className='Hangman-word'>{this.state.nWrong === 6 ? <p> Apple {}</p>:this.guessedWord()}</p>\n        <p className='Hangman-btns' style={this.state.nWrong === 6 ? this.props.styles : {} }>{this.generateButtons()}</p>\n        {this.state.nWrong === 6 ? <p>\"You Loose\" </p>: \"\"}\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n"]},"metadata":{},"sourceType":"module"}