1. Data Store Location
-----------------------------------

mkdir \data\db


2. Starting Server
-----------------------------------

mongod

3. Help
-----------------------------------

mongo --help

4.Changing data file location
-----------------------------------

dbpath = /NewPath
logpath = /NewPath/logname.log
verbose = vvvvv

save the above configurations in mongod.conf and start the server using this conf file

mongod -f \Pathto\mongod.conf


5.Install as a service
-----------------------------------

mongod -f \Pathto\mongod.conf  --install

net start mongodb

		to check for mongod service
		---------------------------
			net start | findstr mongo
			
		to connect mongo shell
		---------------------------
			mongo
			
6.Database is Namespace
------------------------------------

		to show databases
		----------------------------
		show dbs
		
		to check for current database
		----------------------------
		db
		
		to change database
		----------------------------
		use "databasename"
		
		getting help in the shell
		----------------------------
		help
		
7. Replica Sets
--------------------------------------

PrimaryDB
SecondaryDB
ArbiterDB

This is the minimal replica set

PrimaryDB is the only writable instance in the replica set and attemp to write to secondary won't be allowed.

Data will be replicated from primary to secondary which is called eventual consistency.

SecondaryDB is the readable databases (can have many secondary dbs) and becomes primary in case of failover.

ArbiterDB used to decide primary server in case of failover


8. Configuring a Replica Sets
---------------------------------------

PrimaryDB   - A
SecondaryDB - B
ArbiterDB   - C


make three directories for each db data file loactions
------------------------------------------------------------

mkdir C:\\data\db1
mkdir C:\\data\db2
mkdir C:\\data\db3

start mongo instances using each one of the three directories
-------------------------------------------------------------

@REM Primary
start "a" mongod --dbpath C:\\data\db1 --port 30000 --replSet "demo"

@REM Secondary
start "b" mongod --dbpath C:\\data\db2 --port 40000 --replSet "demo"

@REM Arbiter
start "c" mongod --dbpath C:\\data\db3 --port 50000 --replSet "demo"

At this point they are just participating in replica set


To connect on to a  port
--------------------
mongo --port 30000

To know which server i m connected to:
---------------------------------------

db.getMongo()


Defining and configuring replica set to have three members
----------------------------------------------------------

var demoConfig = {
		"_id" : "demo",
		"members": [
			{
				"_id":0,
				"host": "localhost: 30000",
				"priority": 10
			},
			{
				"_id":1,
				"host": "localhost: 40000"
			},
			{
				"_id":2,
				"host": "localhost: 50000",
				"arbiterOnly": true
			}
		]
} 


rs.initiate(demoConfig)

login to primary and run:
-----------------------------

db.foo.save({_id: 1 , value:"Hello World"})
db.foo.find()

login to secondary and run:
-----------------------------
db.setSlaveOk()


to get info about replica set:
------------------------------
rs.status()



9. MongoDb Shell
-----------------------------------

Syntax:

	mongo server1/admin --eval "db.runCommand({logRotate:1})"


running command using script:
-----------------------------
mongo server1 scriptname

run the script and stay in the shell
------------------------------------
mongo server1 scriptname --shell



Using eval example:
	mongo localhost/admin --eval "db.runCommand({logRotate:1})"

	
printing the log:
	mongo localhost/admin --eval "printjson(db.runCommand({logRotate:1}))"
	

setting editor:


set EDITOR = "path\to\editor"

mongo>var fun = function(){}

mongo>edit fun



load file command
-------------------
load(filename)

User RC file
-----------------
C:\users\{username}\mongorc.js


11.SAVING Data
-------------------

Rule : A document must have _id field
	  Doc Size : 16 Mb
	  
Collections  -defines scope of interaction with documents
-----------

->show collections 
->db.foo.save({_id:1})  
  
		foo --- name of collection
		{_id:1} --- document
		
->db.foo.find()

ObjectId() -- generates a new object id from shell
ObjectId().getTimeStamp()


Insert
--------
db.colname.insert({_id:1, name="nitesh"})

Update
--------
db.foo.update(query,update,options)

	-- foo - collection name
	-- query - document
	-- update - change
	-- options - one,many,upsert
	
Ex: 

increment:
-------------------------
db.foo.update({_id:1}, {$inc:{x:1}})

adding fields with set :
-------------------------
db.foo.update({_id:1}, {$set:{y:3}})

remove field
-------------------------
db.foo.update({_id:1}, {$unset: {y:''}})

rename
-------------------------
db.foo.update({_id:1} , {$rename: {'naem': 'Name'}})

push operation
-------------------------
adding array containing values

db.foo.update({_id:1},{$push:{things:'one'}})	

addtoSet
-------------------------

db.foo.update({_id:1},{$addToSet:{things:'one'}})	

pull
------------------------
db.foo.update({_id:1},{$pull:{things:'one'}})

pop
--------------------------
db.foo.update({_id:1},{$pop:{things:'one'}})

multi update
----------------
db.foo.update({},{$push:{things:'one'}}, {multi:true})	



10. Finding Documents
--------------------------

Syntax:

db.foo.find(Query, Projection)

	--- query - which document
	--- projection - fields
	
Greater and Range
------------------

db.animals.find({_id:{$gte:5}},{_id:1})

-gte
-gt
-lt
-lte

db.animals.find({_id:{$gt:2, $lt:5}}, {_id:1})

$not
------

db.animals.find({_id:{$not:{$gt:2}}},{_id:1})


$in
----

db.animals.find({_id:{$in : [1,3]}},{_id:1})

$nin
--------
db.animals.find({_id:{$nin : [1,3]}},{_id:1})

Array
------
db.animals.find({$tags: {$in :['cute','ocean']}}, {name:1})

$all
-----

db.animals.find({$tags: {$all :['cute','ocean']}}, {name:1})

Dot-notation
-------------

db.animals.find({"info.type": "mammal"})
db.animals.find({info: {type: "bird", canFly:true}}, {name:1})

null and $exists
---------------
db.animals.find({"info.canFly": null},{name:1})

db.animals.find({"info.canFly": {$exists:true}},{name:1})


Cursor
---------------

var c = db.animals.find({}, {name:1})

c.size()
c.hasNext()
c.forEach(
	function(d){
		print(d.name)
	}
)


sort()
--------------

Ascending: 1
Descending: -1

db.animals.find({}, {name: 1}).sort({name:1})

db.animals.find({}, {name: 1}).sort({"info.type":1 , "name": 1})

limit()
-----------------

db.animals.find({}, {name: 1}).sort({name:1}).limit(3)

findOne()
-----------------
retrieves only one document and doesn't return cursor

db.animals.findOne({_id:1})

